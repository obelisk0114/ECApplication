package com.backend.ECApplication.Controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;

import com.backend.ECApplication.Model.Product;
import com.backend.ECApplication.Dao.ProductRepository;

/**
 * Since we are deploying our Angular frontend to http://localhost:4200 and our Boot 
 * backend to http://localhost:8080, the browser would otherwise deny requests from 
 * one to the other.
 *
 * @author CTC
 */
@CrossOrigin(origins = "http://localhost:4200", maxAge = 1800)
@Controller // This means that this class is a Controller
@RequestMapping(path="/api/product") // This means URL's start with /product (after Application path)
public class ProductController {
	
	@Autowired
	// This means to get the bean called productRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ProductRepository productRepository;
	
	@PostMapping("")
	@ResponseBody
	public Product addNewProduct(@RequestBody Product product) {
		return productRepository.save(product);
	}
	
	@PostMapping(path="/add") // Map ONLY POST Requests
	public ResponseEntity<Product> addNewProduct(
			@RequestParam(required = false, defaultValue = "") String type, 
			@RequestParam String name, @RequestParam int price,
			@RequestParam(required = false) String imageUrl,
			@RequestParam(required = false, defaultValue = "1") int quantity) {
		
		// @ResponseBody means the returned String is the response, not a view name
		
	    // @RequestParam means it is a parameter from the GET or POST request
		// When the parameter isn't specified, the method parameter is bound to null.
		
		Product p = new Product();
		p.setType(type);
	    p.setName(name);
	    p.setPrice(price);
	    p.setImageUrl(imageUrl);
	    p.setQuantity(quantity);
	    
	    Product result = productRepository.save(p);
	    return ResponseEntity.ok().body(result);
	}
	
	@GetMapping(path="/all")
	@ResponseBody
	public Iterable<Product> getProducts() {
		// This returns a JSON or XML with the users
		return productRepository.findAll();
	}
	
	@GetMapping("/{someType}")
	public @ResponseBody List<Product> getProductsByType(
			@PathVariable(value="someType") String type) {
		return productRepository.findByType(type);
	}
	
	@GetMapping("")
	@ResponseBody
	public ResponseEntity<?> getProduct(@RequestParam Integer id) {
		Optional<Product> entities = productRepository.findById(id);
		// Product entity = entities.get();
		
		return entities.map(response -> ResponseEntity.ok().body(response))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	}
	
	@PutMapping("/update")
	@ResponseBody
	public Product updateProduct(@RequestParam Integer id, 
			@RequestParam(required = false, defaultValue = "keep_it") String type,
			@RequestParam(required = false, defaultValue = "keep_it") String name,
			@RequestParam(required = false, defaultValue = "-1") int price,
			@RequestParam(required = false, defaultValue = "keep_it") String imageUrl,
			@RequestParam(required = false, defaultValue = "-1") int quantity) {
		return productRepository.findById(id).map(product -> {
			setUpdatedProduct(product, type, name, price, imageUrl, quantity);
			return productRepository.save(product);
		}).orElseGet(() -> {
			Product product = new Product();
			setUpdatedProduct(product, type, name, price, imageUrl, quantity);
			return productRepository.save(product);
		});
	}
	
	@PutMapping(path = "/{id}")
	public ResponseEntity<Product> updateProduct(@RequestBody Product product, 
			@PathVariable(value = "id") int id) {
		if (id != product.getId()) {
			return ResponseEntity.unprocessableEntity().build();
		}
		
		Product result = productRepository.save(product);
        return ResponseEntity.ok().body(result);
	}
	
	@PutMapping(path = "")
	public ResponseEntity<List<Product>> updateProducts
	  (@RequestBody List<Product> products) {
		List<Product> results = new ArrayList<>();
		for (Product product : products) {
			Product result = productRepository.save(product);
			results.add(result);
		}
        return ResponseEntity.ok().body(results);
	}
	
	@DeleteMapping("/delete")
	public ResponseEntity<?> deleteAllProducts() {
		productRepository.deleteAll();
		return ResponseEntity.noContent().build();
	}
	
	@DeleteMapping("/{someID}")
	@ResponseBody
	public String deleteProduct(@PathVariable(value="someID") Integer id) {
		productRepository.deleteById(id);
		return "Delete product id = " + id;
	}
	
	private void setUpdatedProduct(Product product, String type, String name,
			int price, String imageUrl, int quantity) {
		if (!type.equals("keep_it")) {
			product.setType(type);
		}
		if (!name.equals("keep_it")) {
			product.setName(name);
		}
		if (price != -1) {
			product.setPrice(price);
		}
		if (!imageUrl.equals("keep_it")) {
			product.setImageUrl(imageUrl);				
		}
		if (quantity != -1) {
			product.setQuantity(quantity);				
		}
	}

}
